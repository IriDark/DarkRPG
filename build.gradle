import com.google.gson.Gson
import com.google.gson.GsonBuilder

import java.nio.charset.StandardCharsets
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id "com.modrinth.minotaur" version "2.+"
    id 'org.spongepowered.mixin' version '[0.7,0.8)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = '1.20.1-build-0.6.2b'
group = 'com.github.IriDark'
base {
    archivesName = 'Valoria'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArg "-Dmixin.env.disableRefMap=true"
            mods {
                valoria {
                    source sourceSets.main
                }
            }
        }

        client{
            args "--username", "IriDark_"
            property 'forge.enabledGameTestNamespaces', "valoria"
        }

        server {
            property 'forge.enabledGameTestNamespaces', "valoria"
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', "valoria"
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', 'valoria', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "valoria.refmap.json"
    config "valoria.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven { url "https://maven.theillusivec4.top/"}
    maven { url "https://cursemaven.com"}
    maven { url "https://maven.blamejared.com"}
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // API's
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}:api")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    implementation fg.deobf("curse.maven:farmers-delight-398521:4679319")
    implementation fg.deobf("curse.maven:jade-324717:4986594")
    implementation fg.deobf("team.lodestar.lodestone:lodestone:${minecraft_version}-${lodestone_version}")

    // RunTime
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}")
    //runtimeOnly fg.deobf("maven.modrinth:epic-fight:20.7.4") // compat, todo: render layers for curios... (someday will be done? no one knows)
    //runtimeOnly fg.deobf("curse.maven:mutil-351914:4824501")
    //runtimeOnly fg.deobf("curse.maven:tetra-289712:4857842")

}

task customRun {
    dependencies{
        runtimeOnly fg.deobf("maven.modrinth:legendary-tooltips:1.4.5")
        runtimeOnly fg.deobf("curse.maven:appleskin-248787:4770828")
        runtimeOnly fg.deobf("curse.maven:prism-lib-638111:4627141")
        runtimeOnly fg.deobf("maven.modrinth:iceberg:1.1.13")
        runtimeOnly fg.deobf("curse.maven:advanced-xray-256256:4840340")
        runtimeOnly fg.deobf("curse.maven:model-gap-fix-676136:4607206")
        runtimeOnly fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:4978810")
        runtimeOnly fg.deobf("maven.modrinth:embeddium:0.3.18+mc1.20.1")
        runtimeOnly fg.deobf("maven.modrinth:oculus:1.20.1-1.7.0")
    }

    finalizedBy 'runClient'
}

jar {
    manifest {
        attributes(["Specification-Title"     : project.name,
                    "Specification-Vendor"    : "IriDark",
                    "Specification-Version"   : project.version,
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.version,
                    "Implementation-Vendor"   : "IriDark",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs": "${project.name.toLowerCase()}.mixins.json"],)
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    duplicatesStrategy = DuplicatesStrategy.WARN
    from sourceSets.main.allSource
}

java {
    withSourcesJar()
}

artifacts {
    archives sourcesJar
}

static InputStreamReader createInput(File f) throws FileNotFoundException {
    return new InputStreamReader(new FileInputStream(f), StandardCharsets.UTF_8)
}

static OutputStreamWriter createOutput(File f) throws FileNotFoundException {
    return new OutputStreamWriter(new FileOutputStream(f), StandardCharsets.UTF_8)
}

// Thanks to Skoow for helping with this
task updateResources {
    doLast {
        File resourcesFolder = new File("src/main/resources"); resourcesFolder.mkdir()
        File langFolder = new File(resourcesFolder, "assets/valoria/lang"); langFolder.mkdir()
        File mainLangJson = new File(langFolder, "en_us.json"); mainLangJson.createNewFile()
        Gson gson = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create()
        TreeMap<String,String> EN_US = gson.fromJson(createInput(mainLangJson), TreeMap<String,String>.class)
        if(EN_US == null) {
            println "Skipping langFile because of incorrect structure " + mainLangJson.getName()
            return
        }

        File[] otherLangs = langFolder.listFiles( (FileFilter) (f) -> {return f != mainLangJson && f.isFile() && f.getName().endsWith(".json")})
        println "\u001B[32m- Comparing langs with:\u001B[0m " + mainLangJson.getName()
        for (final File otherLang in otherLangs) {
            InputStreamReader reader = createInput(otherLang)
            TreeMap<String,String> LANG = gson.fromJson(reader, TreeMap<String,String>.class)
            reader.close();
            if(LANG == null) {
                println "Skipping langFile because of incorrect structure " + otherLang.getName()
                continue
            }

            EN_US.forEach(LANG::putIfAbsent)
            OutputStreamWriter writer = createOutput(otherLang)
            gson.toJson(LANG, TreeMap<String, String>.class, writer)
            writer.close()
            println "\u001B[32m- Compared lang file\u001B[0m " + "\u001B[36m" + otherLang.getName() + "\u001B[0m"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar.finalizedBy('reobfJar')
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url = "file:///${project.projectDir}/../mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

modrinth {
    token = System.getenv("modrinthtoken") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = "valoriadev"
    versionNumber = "${dev_version}"
    versionType = "alpha"
    versionName = "Dev Build - ${dev_version}"
    uploadFile = tasks.jar
    additionalFiles = [sourcesJar]
    changelog = "Just a DevBuild to test things, its some sorta like minecraft snapshots to find bugs and report them"
    dependencies {
        required.project "curios"
        required.project "lodestonelib"
    }
}